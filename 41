# Лабораторная работа №41: Разработка приложения с анимацией в WPF

Я создам приложение WPF, которое включает все задания из лабораторной работы. Вот полный код для файла `MainWindow.xaml` и `MainWindow.xaml.cs`:

## MainWindow.xaml

```xml
<Window x:Class="LabWork41.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LabWork41"
        mc:Ignorable="d"
        Title="Лабораторная работа №41" Height="600" Width="800">
    <TabControl>
        <!-- Задание 5.1 - Анимация меню -->
        <TabItem Header="Задание 5.1">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition/>
                </Grid.ColumnDefinitions>
                
                <!-- Боковое меню -->
                <Border x:Name="SideMenu" Grid.Column="0" Width="200" Background="#FF3F3F3F">
                    <StackPanel>
                        <TextBlock Text="Меню" Foreground="White" FontSize="18" Margin="10"/>
                        <Button Content="Пункт 1" Margin="10,5" Foreground="White" Background="Transparent"/>
                        <Button Content="Пункт 2" Margin="10,5" Foreground="White" Background="Transparent"/>
                        <Button Content="Пункт 3" Margin="10,5" Foreground="White" Background="Transparent"/>
                    </StackPanel>
                </Border>
                
                <!-- Основное содержимое -->
                <Grid Grid.Column="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition/>
                    </Grid.RowDefinitions>
                    
                    <!-- Кнопка-гамбургер -->
                    <Button x:Name="HamburgerButton" Grid.Row="0" Width="30" Height="30" Margin="5" 
                            HorizontalAlignment="Left" Click="HamburgerButton_Click">
                        <Path Data="M0,4 L30,4 M0,15 L30,15 M0,26 L30,26" 
                              Stroke="Black" StrokeThickness="2"/>
                    </Button>
                    
                    <TextBlock Grid.Row="1" Text="Основное содержимое" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                </Grid>
            </Grid>
        </TabItem>
        
        <!-- Задание 5.2 - Анимация текста кнопки -->
        <TabItem Header="Задание 5.2">
            <Grid>
                <Button x:Name="AnimatedButton" Content="Нажми меня" Width="150" Height="50" 
                        HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14"/>
            </Grid>
        </TabItem>
        
        <!-- Задание 5.3 - Комплексная анимация кнопки -->
        <TabItem Header="Задание 5.3">
            <Grid>
                <Button x:Name="ComplexAnimatedButton" Content="Комплексная анимация" Width="150" Height="50" 
                        HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="14"/>
            </Grid>
        </TabItem>
        
        <!-- Задание 5.4 - Анимация цвета при наведении -->
        <TabItem Header="Задание 5.4">
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                <StackPanel.Resources>
                    <Style TargetType="Button">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="LightBlue" Duration="0:0:0.3" 
                                                           Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation To="LightGray" Duration="0:0:0.5" 
                                                           Storyboard.TargetProperty="Background.Color"/>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </Style.Triggers>
                        <Setter Property="Background">
                            <Setter.Value>
                                <SolidColorBrush Color="LightGray"/>
                            </Setter.Value>
                        </Setter>
                        <Setter Property="Margin" Value="10"/>
                        <Setter Property="Width" Value="100"/>
                        <Setter Property="Height" Value="50"/>
                    </Style>
                </StackPanel.Resources>
                
                <Button Content="Элемент 1"/>
                <Button Content="Элемент 2"/>
                <Button Content="Элемент 3"/>
            </StackPanel>
        </TabItem>
        
        <!-- Задание 5.5 - Анимация градиента круга -->
        <TabItem Header="Задание 5.5">
            <Grid>
                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                    <Button Content="Изменить цвет" Width="120" Height="30" Margin="0,0,0,20" Click="ChangeColor_Click"/>
                    
                    <Ellipse x:Name="ColorCircle" Width="150" Height="150" Stroke="Black" StrokeThickness="2">
                        <Ellipse.Fill>
                            <RadialGradientBrush x:Name="CircleGradient" GradientOrigin="0.5,0.5" Center="0.5,0.5">
                                <GradientStop Color="Red" Offset="0"/>
                                <GradientStop Color="Blue" Offset="1"/>
                            </RadialGradientBrush>
                        </Ellipse.Fill>
                    </Ellipse>
                </StackPanel>
            </Grid>
        </TabItem>
    </TabControl>
</Window>
```

## MainWindow.xaml.cs

```csharp
using System;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Media;
using System.Windows.Media.Animation;

namespace LabWork41
{
    public partial class MainWindow : Window
    {
        private bool isMenuOpen = true;
        
        public MainWindow()
        {
            InitializeComponent();
            Loaded += MainWindow_Loaded;
        }

        private void MainWindow_Loaded(object sender, RoutedEventArgs e)
        {
            // Анимация для задания 5.2
            DoubleAnimation textAnimation = new DoubleAnimation
            {
                From = 14,
                To = 28,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };
            AnimatedButton.FontSize = 14;
            AnimatedButton.BeginAnimation(Button.FontSizeProperty, textAnimation);
            
            // Анимация для задания 5.3
            DoubleAnimation complexTextAnimation = new DoubleAnimation
            {
                From = 14,
                To = 28,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };
            
            DoubleAnimation widthAnimation = new DoubleAnimation
            {
                From = 150,
                To = 300,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };
            
            DoubleAnimation heightAnimation = new DoubleAnimation
            {
                From = 50,
                To = 100,
                Duration = TimeSpan.FromSeconds(1),
                AutoReverse = true,
                RepeatBehavior = new RepeatBehavior(2)
            };
            
            ComplexAnimatedButton.BeginAnimation(Button.FontSizeProperty, complexTextAnimation);
            ComplexAnimatedButton.BeginAnimation(Button.WidthProperty, widthAnimation);
            ComplexAnimatedButton.BeginAnimation(Button.HeightProperty, heightAnimation);
        }

        private void HamburgerButton_Click(object sender, RoutedEventArgs e)
        {
            DoubleAnimation animation = new DoubleAnimation
            {
                Duration = TimeSpan.FromSeconds(1),
                To = isMenuOpen ? 0 : 200
            };
            
            SideMenu.BeginAnimation(Border.WidthProperty, animation);
            isMenuOpen = !isMenuOpen;
        }

        private void ChangeColor_Click(object sender, RoutedEventArgs e)
        {
            ColorAnimationUsingKeyFrames animation = new ColorAnimationUsingKeyFrames
            {
                Duration = TimeSpan.FromSeconds(2.5)
            };
            
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Red, KeyTime.FromPercent(0)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Yellow, KeyTime.FromPercent(0.25)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Green, KeyTime.FromPercent(0.5)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Blue, KeyTime.FromPercent(0.75)));
            animation.KeyFrames.Add(new LinearColorKeyFrame(Colors.Purple, KeyTime.FromPercent(1)));
            
            CircleGradient.GradientStops[0].BeginAnimation(GradientStop.ColorProperty, animation);
            
            ColorAnimationUsingKeyFrames animation2 = new ColorAnimationUsingKeyFrames
            {
                Duration = TimeSpan.FromSeconds(2.5)
            };
            
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Blue, KeyTime.FromPercent(0)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Purple, KeyTime.FromPercent(0.25)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Red, KeyTime.FromPercent(0.5)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Yellow, KeyTime.FromPercent(0.75)));
            animation2.KeyFrames.Add(new LinearColorKeyFrame(Colors.Green, KeyTime.FromPercent(1)));
            
            CircleGradient.GradientStops[1].BeginAnimation(GradientStop.ColorProperty, animation2);
        }
    }
}
```

## Ответы на контрольные вопросы

1. **Как задать анимацию размеров в приложениях WPF?**
   - Анимация размеров в WPF задается с помощью `DoubleAnimation` для свойств `Width` и `Height`. Можно анимировать любые свойства типа `double`, такие как размеры элементов, шрифтов и т.д.

2. **Как задать анимацию цвета в приложениях WPF?**
   - Анимация цвета задается с помощью `ColorAnimation` или `ColorAnimationUsingKeyFrames` для свойств, связанных с цветом (например, `Background.Color`, `Foreground.Color` и т.д.).

3. **Чем отличается покадровая анимация от плавной анимации в WPF?**
   - Плавная анимация (`DoubleAnimation`, `ColorAnimation`) изменяет значения свойств плавно между начальным и конечным значениями. Покадровая анимация (`AnimationUsingKeyFrames`) позволяет задавать конкретные значения в определенные моменты времени, что дает больше контроля над анимацией.

4. **Какие свойства позволяют управлять анимацией в WPF и для чего предназначено каждое свойство?**
   - `Duration` - определяет длительность анимации
   - `From` и `To` - начальное и конечное значения анимации
   - `AutoReverse` - определяет, будет ли анимация воспроизводиться в обратном порядке после завершения
   - `RepeatBehavior` - определяет, сколько раз будет повторяться анимация
   - `EasingFunction` - позволяет применять различные функции для изменения поведения анимации (ускорение, замедление и т.д.)

## Вывод

В ходе лабораторной работы были изучены основные принципы работы с анимацией в WPF. Были реализованы различные виды анимации: анимация размеров, цвета, комплексная анимация нескольких свойств одновременно, а также анимация с использованием ключевых кадров. Полученные навыки позволяют создавать более динамичные и интерактивные пользовательские интерфейсы в WPF-приложениях.
