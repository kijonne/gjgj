Отлично, это вторая лабораторная работа, посвященная тест-дизайну. Выполним её по пунктам.

Лабораторная работа №2: Изучение процесса формирования набора тестовых данных

Задание 5.1: Граничные значения и классы эквивалентности

5.1.1 Выделите допустимые и недопустимые значения

Проанализируем метод ValidateUser по каждому параметру:

1. `username` (имя пользователя)
   · Условия: Не null/пустой/пробелы, длина >= 3 и <= 20.
   · Недопустимый класс эквивалентности (НД):
     · null, "", "  " (нарушение IsNullOrWhiteSpace)
     · "a", "ab" (длина < 3)
     · "оченьдлинноеимяпользователя" (длина > 20)
   · Допустимый класс эквивалентности (Д):
     · "abc", "user", "имяпользователя" (длина от 3 до 20)
   · Граничные значения:
     · Нижняя граница: 2 (НД), 3 (Д), 4 (Д)
     · Верхняя граница: 19 (Д), 20 (Д), 21 (НД)
2. `password` (пароль)
   · Условия: Не null/пустой, длина >= 6, должна содержать минимум 1 цифру.
   · Недопустимый класс эквививалентности (НД):
     · null, "" (нарушение IsNullOrEmpty)
     · "a", "abcde" (длина < 6)
     · "password", "пароль" (длина >=6, но нет цифр)
   · Допустимый класс эквивалентности (Д):
     · "pass1" (длина=5, есть цифра -> НД по длине)
     · "пароль1", "123456", "pass123" (длина >=6 и есть минимум 1 цифра)
   · Граничные значения (длина):
     · Нижняя граница: 5 (НД), 6 (Д), 7 (Д)
   · Для содержания цифр граница одна: есть хоть одна цифра (Д) vs. нет цифр (НД).
3. `age` (возраст)
   · Условия: Значение >= 13 и <= 120.
   · Недопустимый класс эквивалентности (НД):
     · 12, 0, -5 (age < 13)
     · 121, 200 (age > 120)
   · Допустимый класс эквивалентности (Д):
     · 13, 18, 30, 120 (age от 13 до 120 включительно)
   · Граничные значения:
     · Нижняя граница: 12 (НД), 13 (Д), 14 (Д)
     · Верхняя граница: 119 (Д), 120 (Д), 121 (НД)
4. `email` (электронная почта)
   · Условия: Не null/пустой/пробелы, должна содержать "@", должна оканчиваться на ".edu".
   · Недопустимый класс эквивалентности (НД):
     · null, "", "  " (нарушение IsNullOrWhiteSpace)
     · "user.example.com" (нет символа @)
     · "user@example.com" (есть @, но не оканчивается на .edu)
     · "user@example.org" (есть @, но не .edu)
   · Допустимый класс эквивалентности (Д):
     · "user@domain.edu", "a@b.edu" (не пустой, есть @, оканчивается на .edu)
   · Граничные значения здесь носят скорее логический, не числовой характер: наличие/отсутствие символа @ и суффикса .edu.

5.1.2 Составьте таблицу тестируемых значений

На основе анализа выше составим таблицу. Для числовых параметров (username.length, age) будем использовать граничные значения. Для строковых — представители классов.

Параметр Класс Эквив. Тестовое значение Примечание (Граница, тип значения)
username НД null Null
 НД "" Пустая строка
 НД "a" Длина = 2 (Нижняя граница - 1)
 Д "abc" Длина = 3 (Нижняя граница)
 Д "username" Длина = 8 (Валидное среднее значение)
 Д "имяпользователя20" Длина = 20 (Верхняя граница) *
 НД "имяпользователя21" Длина = 21 (Верхняя граница + 1) *
password НД null Null
 НД "" Пустая строка
 НД "abcde" Длина = 5 (Нижняя граница - 1)
 Д "abcde1" Длина = 6 (Нижняя граница), есть цифра
 НД "password" Длина >=6, но нет цифр
 Д "secure123" Валидный пароль
age НД 12 Нижняя граница - 1
 Д 13 Нижняя граница
 Д 25 Валидный возраст
 Д 120 Верхняя граница
 НД 121 Верхняя граница + 1
email НД null Null
 НД "" Пустая строка
 НД "user.example.com" Нет символа @
 НД "user@example.com" Есть @, но не .edu
 Д "user@domain.edu" Валидный email (.edu)

*Прим.: Для username взяты значения, где длина символов соответствует условию. "имяпользователя20" - это 20 символов.

Для сайта pairwise.teremokgames.com: Вам нужно будет ввести параметры и их значения в формате:

· username: null, "", "a", "abc", "username", "имяпользователя20", "имяпользователя21"
· password: null, "", "abcde", "abcde1", "password", "secure123"
· age: 12, 13, 25, 120, 121
· email: null, "", "user.example.com", "user@example.com", "user@domain.edu"

---

Задание 5.2: Попарное тестирование

5.2.1 Все возможные комбинации (Полное покрытие) Количество всех комбинаций вычисляется как произведение количества значений каждого параметра.

· username: 7 значений
· password: 6 значений
· age: 5 значений
· email: 5 значений Общее количество комбинаций: 7 * 6 * 5 * 5 = 1050 тестов.

5.2.2 Сокращение комбинаций методом попарного тестирования Метод попарного тестирования (Pairwise) предполагает, что большинство дефектов возникает при взаимодействии двух параметров. Мы составляем набор тестов, в котором каждое значение каждого параметра хотя бы раз сочетается с каждым значением любого другого параметра.

1. Перейдите на сайт https://pairwise.teremokgames.com/.
2. В поле "Parameters" введите имена параметров и их значения через запятую, как описано выше.
   ```
   username: null, "", "a", "abc", "username", "имяпользователя20", "имяпользователя21"
   password: null, "", "abcde", "abcde1", "password", "secure123"
   age: 12, 13, 25, 120, 121
   email: null, "", "user.example.com", "user@example.com", "user@domain.edu"
   ```
3. Нажмите "Generate". Алгоритм сгенерирует набор тестовых комбинаций. Количество комбинаций будет значительно меньше 1050 (обычно в районе 30-50 для таких входных данных). Например, 38.
4. Сравнение: Количество тестов сократилось с 1050 до, например, 38. Это демонстрирует мощь метода попарного тестирования для сокращения трудозатрат при сохранении высокого покрытия.

5.2.3 Выполнение тестирования и таблица результатов

Вам нужно прогнать все сгенерированные пары через метод ValidateUser и записать результат. Вот пример первых нескольких строк и шаблон для заполнения.

· Пример реализации метода для тестирования: Вам нужно написать консольное приложение или использовать Unit-тест (например, xUnit, NUnit) для автоматической проверки. Логика метода уже дана в задании.
· Пример таблицы результатов:

# username password age email Ожидаемый результат Фактический результат Примечание
1 null null 12 null False False Все параметры невалидны
2 "" "" 13 "" False False ...
3 "a" "abcde" 25 "user.example.com" False False ...
4 "abc" "abcde1" 120 "user@example.com" False False email не .edu
5 "username" "password" 121 "user@domain.edu" False False password без цифр, age > 120
6 "имяпользователя20" "secure123" 12 null False False age < 13
7 "имяпользователя21" null 13 "user@domain.edu" False False username слишком длинный, password=null
8 ... ... ... ... ... ... ...
9 "abc" "abcde1" 25 "user@domain.edu" True True Все параметры валидны
... ... ... ... ... ... ... ...

Вам необходимо заполнить эту таблицу для всех сгенерированных пар.

---

Задание 5.3: Генерация больших наборов данных

5.3.1 Генерация CSV-файла на Mockaroo

1. Перейдите на https://mockaroo.com/.
2. Вам нужно создать 4 поля, соответствующие параметрам метода. Настройте их следующим образом:
   · Field Name: username, Type: Custom List
     · Введите значения из ваших классов: abc, username, имяпользователя20, null, (пусто), a, имяпользователя21
   · Field Name: password, Type: Custom List
     · Введите значения: abcde1, secure123, null, (пусто), abcde, password
   · Field Name: age, Type: Number
     · Min: 10, Max: 125 (чтобы захватить невалидные значения)
   · Field Name: email, Type: Custom List
     · Введите значения: user@domain.edu, null, (пусто), user.example.com, user@example.com
3. Установите количество строк 1000.
4. Формат файла: CSV.
5. Нажмите "Download Data". Файл с именами MOCK_DATA.csv будет скачан.

5.3.2 Тестирование с использованием CSV-файла

1. Напишите код (например, на C#), который:
   · Считывает данные из CSV-файла.
   · Для каждой строки вызывает метод ValidateUser(username, password, age, email).
   · Считает количество успешных (true) и неуспешных (false) проверок.
2. Пример логики:
   ```csharp
   using System;
   using System.IO;
   using System.Linq;
   
   class Program
   {
       // Ваш метод ValidateUser должен быть здесь
       public static bool ValidateUser(string username, string password, int age, string email) { ... }
   
       static void Main()
       {
           int totalTests = 0;
           int passedTests = 0;
           int failedTests = 0;
   
           var lines = File.ReadAllLines("MOCK_DATA.csv").Skip(1); // Пропускаем заголовок
   
           foreach (var line in lines)
           {
               totalTests++;
               var values = line.Split(','); // Разделяем строку CSV на значения
   
               // Парсим значения. Может потребоваться обработка ошибок для null и пустых строк.
               string un = values[0] == "null" ? null : values[0];
               string pw = values[1] == "null" ? null : values[1];
               // Для пустых строк, сгенерированных Mockaroo, может быть просто ""
               int ag = int.Parse(values[2]);
               string em = values[3] == "null" ? null : values[3];
   
               bool result = ValidateUser(un, pw, ag, em);
   
               if (result)
                   passedTests++;
               else
                   failedTests++;
           }
   
           Console.WriteLine($"Всего тестов: {totalTests}");
           Console.WriteLine($"Пройдено: {passedTests}");
           Console.WriteLine($"Провалено: {failedTests}");
           Console.WriteLine($"Соотношение (Успех/Провал): {passedTests}:{failedTests}");
       }
   }
   ```
3. Запустите программу. Результатом будет вывод, подобный этому: Всего тестов: 1000 Пройдено: 42 Провалено: 958 Соотношение (Успех/Провал): 42:958
   · Цифры приведены примерные, так как данные генерируются случайным образом. Но из-за большого количества невалидных комбинаций успешных тестов будет очень мало.

---

Ответы на контрольные вопросы (для отчета)

8.1 Что такое набор тестовых данных? Набор тестовых данных — это совокупность входных значений, условий выполнения и ожидаемых результатов, разработанная для проверки корректности работы программного обеспечения. Он используется для выполнения тест-кейсов с целью выявления дефектов.

8.2 Что такое граничные значения? Граничные значения — это такие входные или выходные данные, которые находятся на границах допустимого диапазона или классов эквивалентности. Опыт показывает, что ошибки часто происходят на границах обрабатываемых диапазонов. Например, для условия age >= 13 граничными значениями будут 12 (недопустимое), 13 и 14 (допустимые).

8.3 Что такое классы эквивалентности? Класс эквивалентности — это множество входных данных, которые обрабатываются программой одинаковым образом и ожидаемо приводят к одному и тому же результату (либо все валидны, либо все невалидны). Разделение на классы эквивалентности позволяет значительно сократить количество необходимых тестов. Например, для параметра age все значения от 13 до 120 образуют один допустимый класс эквивалентности, а все значения меньше 13 и больше 120 — два недопустимых класса.
