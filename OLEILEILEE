К сожалению, я не могу напрямую выполнить задания, требующие работы в графической среде разработки Visual Studio 2022, так как я не имею к ней доступа и не могу создавать, запускать и отлаживать проекты.

Однако я могу предоставить вам полное и подробное текстовое руководство по выполнению каждого пункта задания. Вы можете использовать его как пошаговую инструкцию для самостоятельной работы.

---

Пошаговое руководство по выполнению Практической работы №2

Задание 5.1: Создание проекта WPF

1. Запустите Visual Studio 2022.
2. На начальном экране выберите «Создать новый проект».
3. В поиске шаблонов введите WPF и выберите «Приложение WPF» (язык: C#). Нажмите «Далее».
4. Настройте проект:
   · Имя проекта: LoginDebugApp (или любое другое на ваше усмотрение).
   · Расположение: Выберите удобную папку.
   · Имя решения: Оставьте по умолчанию. Нажмите «Далее».
   · Целевая framework: Оставьте последнюю версию (.NET 6.0 или 8.0). Нажмите «Создать».
5. Спроектируйте интерфейс:
   · Перед вами откроется файл MainWindow.xaml с дизайнером.
   · Удалите стандартный текст <Grid>...</Grid>.
   · Скопируйте и вставьте следующий XAML-код между тегами <Window> и </Window>:
   ```xaml
   <Grid Margin="20">
       <Grid.RowDefinitions>
           <RowDefinition Height="Auto"/>
           <RowDefinition Height="Auto"/>
           <RowDefinition Height="Auto"/>
           <RowDefinition Height="Auto"/>
       </Grid.RowDefinitions>
       <Grid.ColumnDefinitions>
           <ColumnDefinition Width="Auto"/>
           <ColumnDefinition Width="*"/>
       </Grid.ColumnDefinitions>
   
       <!-- Метка и поле для логина -->
       <Label Content="Логин:" Grid.Row="0" Grid.Column="0" Margin="5"/>
       <TextBox x:Name="TextBoxLogin" Grid.Row="0" Grid.Column="1" Margin="5" Width="200"/>
   
       <!-- Метка и поле для пароля -->
       <Label Content="Пароль:" Grid.Row="1" Grid.Column="0" Margin="5"/>
       <PasswordBox x:Name="PasswordBox" Grid.Row="1" Grid.Column="1" Margin="5" Width="200"/>
   
       <!-- Кнопка "Войти" -->
       <Button x:Name="LoginButton" Content="Войти" Grid.Row="2" Grid.ColumnSpan="2" Margin="5" Width="100" Click="LoginButton_Click"/>
   
   </Grid>
   ```
6. Реализуйте функционал:
   · В обозревателе решений правой кнопкой мыши щелкните на MainWindow.xaml и выберите «Просмотреть код».
   · В файл MainWindow.xaml.cs добавьте обработчик события для кнопки, который будет выводить MessageBox.
   ```csharp
   using System.Windows; // Эта строка должна быть уже в начале файла
   
   namespace LoginDebugApp
   {
       public partial class MainWindow : Window
       {
           public MainWindow()
           {
               InitializeComponent();
           }
   
           private void LoginButton_Click(object sender, RoutedEventArgs e)
           {
               // Этот код выполняется при нажатии на кнопку
               string login = TextBoxLogin.Text;
               string password = PasswordBox.Password; // Для PasswordBox используем .Password
   
               // Выводим сообщение с введенными данными
               MessageBox.Show($"Введен логин: '{login}' и пароль: '{password}'", "Учетные данные");
           }
       }
   }
   ```
7. Проверьте работу: Нажмите F5 (или зелёную стрелку «Запуск»). Убедитесь, что приложение запускается, и при нажатии на кнопку «Войти» появляется окно с сообщением.

---

Задание 5.2: Отладка ПО средствами Visual Studio

1. Установите точку останова: В коде метода LoginButton_Click щелкните на серой полоске слева от строки string login = TextBoxLogin.Text;. Появится красный кружок — точка останова (Breakpoint).
2. Запустите отладку: Нажмите F5. Приложение запустится в режиме отладки.
3. Срабатывание точки останова: Введите в поля любые данные (например, admin и 12345) и нажмите кнопку «Войти». Выполнение программы прервется, и Visual Studio выделит желтым цветом строку с точкой останова. Эта строка еще не выполнена.
4. Пошаговое выполнение:
   · Нажмите F10 (Step Over). Желтый указатель переместится на следующую строку (string password = ...). Переменная login теперь создана и ей присвоено значение.
   · Снова нажмите F10. Теперь создана и переменная password.
   · Еще раз нажмите F10. Указатель переместится на строку с MessageBox.Show.... Обратите внимание, что сообщение еще не появилось.
   · Нажмите F10 еще раз для выполнения метода MessageBox.Show. Появится окно сообщения. Закройте его, и отладчик завершит работу, так как метод закончил выполнение.
5. Наблюдение за переменными:
   · Перед тем как нажимать F10, после остановки на точке останова, откройте меню «Отладка» -> «Окна» -> «Locals» (Локальные переменные) и «Autos» (Авто).
   · В окне «Autos» вы сразу увидите значения TextBoxLogin.Text и PasswordBox.Password (пока еще в виде звездочек).
   · После выполнения шага с F10 (создание переменной login) в окне «Locals» появится эта переменная и ее значение. Это окно показывает все переменные в текущем контексте (в текущем методе).

---

Задание 5.3: Работа с дампами отладки

1. Новая точка останова: Переместите или установите новую точку останова на строку MessageBox.Show(...); (перед выводом сообщения).
2. Запустите отладку (F5), введите данные, нажмите «Войти». Отладчик остановится на новой точке.
3. Создание дампа: В меню сверху выберите «Отладка» -> «Сохранить дамп как...». Сохраните файл (например, login_dump.dmp) в удобное место.
4. Закройте Visual Studio и ваш проект.
5. Откройте дамп: Запустите Visual Studio. На начальном экране выберите «Продолжить без кода...».
   · В меню выберите «Отладка» -> «Файл дампа отладки» (Open Dump).
   · Укажите путь к сохраненному файлу login_dump.dmp и откройте его.
6. Анализ дампа: Откроется окно с сводкой по дампу («Summary»). В разделе «Actions» нажмите «Debug with Mixed» (Отладка в режиме смешанного кода).
7. Изучение переменных: Visual Studio восстановит состояние программы на момент создания дампа. Вы сможете увидеть ту же самую точку останова. Теперь вы можете открыть окна «Locals» и «Autos» и увидеть те самые значения логина и пароля, которые были введены при создании дампа, даже though исходный код был закрыт.
8. Проверка переносимости: Закройте дамп. Переместите папку с проектом в другое место (например, на Рабочий стол). Снова откройте файл дампа через «Отладка -> Файл дампа отладки». Вы увидите, что отладчик не сможет найти исходный код (так как путь изменился), но вы по-прежнему сможете анализировать значения переменных в окнах отладки. Это главная сила дампов — анализ сбоев на компьютерах, где нет исходного кода.

---

Задание 5.4: Работа с динамическим визуальным древом

1. Запустите отладку вашего приложения (F5).
2. Откройте Live Visual Tree: Во время работы приложения перейдите в меню Visual Studio «Отладка» -> «Окна» -> «Динамическое визуальное дерево» (Live Visual Tree).
3. Изучите окно: В этом окне вы увидите иерархию всех визуальных элементов вашего окна WPF в реальном времени. Разверните узлы, чтобы найти Label, TextBox, PasswordBox, Button.
4. Измените свойства:
   · В окне «Динамическое визуальное дерево» найдите и выберите один из элементов Label (например, с содержанием "Логин:").
   · Теперь откройте окно «Динамические свойства» (Live Property Explorer) через меню «Отладка» -> «Окна» -> «Динамические свойства».
   · В этом окне найдите свойство Foreground (цвет текста) и FontSize (размер шрифта).
   · Щелкните по значению свойства (например, #FF000000), измените его на Red и нажмите Enter. Цвет текста метки в запущенном приложении мгновенно изменится на красный.
   · Аналогично измените FontSize на 20. Размер текста увеличится.
5. Экспериментируйте: Проделайте то же самое с другими элементами, меняя их свойства (например, Width, Height, Margin, Background у кнопки). Это мощный инструмент для live-редактирования внешнего вида приложения без остановки отладки и перезапуска.

---

Ответы на контрольные вопросы (для отчета)

8.1 Как использовать точки останова и что они позволяют сделать?

· Как использовать: Щелкнуть на левом поле редактора кода напротив нужной строки (или нажать F9 на этой строке). Появится красный кружок.
· Что позволяют: Точки останова приостанавливают выполнение программы в заданном месте. Это позволяет проанализировать состояние программы (значения переменных, call stack) в конкретный момент времени, до выполнения определенных инструкций. Это основной инструмент для поиска логических ошибок.

8.2 В чем разница между "Step Over", "Step Into" и "Step Out"?

· Step Over (F10): Выполняет текущую строку кода. Если в строке есть вызов метода, этот метод выполняется полностью (за один шаг), и отладчик переходит к следующей строке текущего метода. Используется для того, чтобы не углубляться в детали известных или стандартных методов.
· Step Into (F11): Выполняет текущую строку кода. Если в строке есть вызов метода, отладчик «заходит» внутрь этого метода и останавливается на его первой строке. Используется для подробной отладки и анализа работы вызываемого метода.
· Step Out (Shift + F11): Выполняет все оставшиеся команды текущего метода и останавливается на следующей строке метода, который его вызвал. Используется, когда вы зашли в метод с помощью F11, проанализировали нужное и хотите быстро вернуться к месту вызова.

8.3 Как используется окно "Call Stack" для анализа вызовов функций? Окно «Call Stack» (Стек вызовов) показывает цепочку вызовов методов, которые привели к текущей точке выполнения программы. Каждая строка в этом окне представляет собой метод. Верхняя строка — это текущий выполняемый метод, ниже — метод, который его вызвал, и так далее до самого начала программы. Это окно критически важно для:

· Понимания, как программа оказалась в данном месте (например, в методе обработки кнопки).
· Отладки сложных сценариев с глубокой вложенностью вызовов.
· Поиска места, где было вызвано исключение (error).

8.4 Для чего нужны дампы отладки? Дампы отладки (dump files) — это «снимки» памяти процесса в определенный момент времени (например, при сбое или при достижении точки останова). Они нужны для:

1. Посмертной отладки (Post-mortem debugging): Анализа причин сбоя программы на компьютере пользователя, где нет установленной среды разработки и исходного кода. Инженер может забрать дамп, открыть его у себя в Visual Studio и проанализировать состояние переменных и call stack на момент краха.
2. Диагностики сложных проблем: которые трудно воспроизвести в среде разработки. Дамп позволяет «заморозить» состояние программы в проблемный момент для детального изучения.
3. Сохранения состояния: Для анализа работы программы в конкретный момент времени, если его нужно показать коллеге или изучить позже.
